# Definisi Graf (Dictionary) yang merepresentasikan lokasi dan koneksi antar lokasi di UNIB
# Setiap lokasi terhubung dengan lokasi lain beserta waktu tempuh (menit) dan jarak (meter)

# Definisi Dictionary untuk kecepatan rata-rata kendaraan (tidak digunakan langsung dalam kode)

# Fungsi BFS untuk mencari jalur terpendek antara dua lokasi
def bfs_shortest_path(graph, start, goal, day):
  # Inisialisasi list 'explored' untuk menyimpan node yang sudah dikunjungi
  # Inisialisasi queue dengan node awal sebagai path pertama

  # Jika node awal dan tujuan sama, kembalikan node awal sebagai path, waktu = 0, jarak = 0
  
  # Selama queue tidak kosong:
    # Ambil path pertama dari queue
    # Ambil node terakhir dari path

    # Jika node belum dieksplorasi:
      # Inisialisasi list 'neighbors' untuk menyimpan tetangga dari node saat ini
      # Iterasi melalui tetangga node dari graf:
        # Tambahkan tuple (tetangga, waktu, jarak) ke list 'neighbors'

      # Jika hari adalah Sabtu atau Minggu DAN node adalah "Gerbang masuk UNIB belakang":
        # Batasi 'neighbors' hanya dengan jalur pertama (karena gerbang sebagian tutup)

      # Iterasi melalui tetangga yang sudah disesuaikan:
        # Buat path baru dengan menambahkan tetangga ke path saat ini
        # Tambahkan path baru ke queue
        # Jika tetangga adalah node tujuan:
          # Inisialisasi total_time = 0 dan total_distance = 0
          # Iterasi melalui node di path baru (kecuali node terakhir):
            # Dapatkan node saat ini dan node berikutnya dari path
            # Cari koneksi antara node saat ini dan node berikutnya di graf:
              # Tambahkan waktu dan jarak ke total_time dan total_distance
              # Hentikan pencarian koneksi

          # Kembalikan path baru, total_time, dan total_distance

      # Tandai node saat ini sebagai sudah dieksplorasi

  # Jika tidak ada path ditemukan, kembalikan None, pesan error, dan 0

# Fungsi untuk menangani pencarian path berdasarkan input dari GUI
def find_path():
  # Dapatkan lokasi awal, lokasi tujuan, kendaraan, hari, dan waktu dari input GUI

  # Jika ada input yang kosong, tampilkan pesan error dan hentikan fungsi

  # Jika waktu yang dipilih sebelum jam 6 pagi atau setelah jam 10 malam:
    # Tampilkan pesan bahwa pencarian rute tidak dapat dilakukan karena gerbang tutup dan hentikan fungsi

  # Jika lokasi awal atau tujuan tidak ada di graf:
    # Tampilkan pesan error dan hentikan fungsi

  # Panggil fungsi 'bfs_shortest_path' untuk mendapatkan path, waktu, dan jarak
  # Jika path ditemukan (berupa list):
    # Format output dengan path, waktu tempuh, dan jarak
    # Tampilkan hasil di label hasil
  # Jika tidak ada path ditemukan:
    # Tampilkan pesan error di label hasil

# Fungsi untuk mereset input dan output GUI
def reset_search():
  # Reset semua input combobox
  # Reset label hasil

# Inisialisasi GUI menggunakan Tkinter
# Konfigurasi jendela utama (judul, ukuran, warna latar)

# Styling GUI (warna, font)

# Membuat frame input untuk menampung label dan combobox
# Membuat label dan combobox untuk lokasi awal, lokasi tujuan, kendaraan, hari, dan waktu
# Mengatur layout menggunakan grid

# Membuat frame tombol untuk menampung tombol cari dan reset
# Membuat tombol "Cari Rute" dan "Reset"
# Mengatur layout menggunakan pack

# Membuat label untuk menampilkan hasil
# Konfigurasi label (wrapping text, perataan, font, warna latar, warna teks)
# Mengatur layout menggunakan pack

# Membuat label untuk catatan
# Konfigurasi label (font, warna latar, warna teks)
# Mengatur layout menggunakan pack

# Menjalankan main loop GUI
