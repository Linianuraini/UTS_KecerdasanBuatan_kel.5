START

IMPORT library tkinter, messagebox, ttk, folium, webbrowser
IMPORT datetime

// =====================================
// BAGIAN 1: DEFINISI GRAF JALUR KAMPUS
// =====================================
DEFINE graph AS dictionary:
    SET setiap node (misal "Gedung A", "Gedung B", dll)
    SET isi value node sebagai list of tuples:
        (nama_tetangga, waktu_tempuh_dalam_menit, jarak_dalam_meter)


// ======================================
// BAGIAN 2: KECEPATAN BERDASARKAN KENDARAAN
// ======================================
DEFINE transport_speed AS dictionary:
    "Motor" → 30 km/jam
    "Mobil" → 20 km/jam
    "Sepeda" → 10 km/jam
    "Jalan Kaki" → 5 km/jam


// ======================================
// BAGIAN 3: KOORDINAT TIAP LOKASI
// ======================================
FUNCTION get_coordinates(location):
    DEFINE dictionary koordinat lokasi
    IF location in dictionary:
        RETURN koordinat
    ELSE:
        RETURN koordinat default (0, 0)


// ===================================================
// BAGIAN 4: BFS UNTUK MENCARI JALUR TERPENDEK
// ===================================================
FUNCTION bfs_shortest_path(graph, start, goal, day):
    INIT queue ← [[start]]
    INIT explored ← []

    IF start == goal:
        RETURN [start], 0, 0

    WHILE queue is not empty:
        path ← queue.pop(0)
        node ← last element of path

        IF node not in explored:
            neighbors ← graph[node]

            IF day IN ["Sabtu", "Minggu"] AND node == "Gerbang masuk UNIB belakang":
                neighbors ← hanya tetangga yang menuju "Gedung D" (jalur khusus 1 arah)

            FOR EACH (neighbor, time, distance) in neighbors:
                new_path ← path + [neighbor]
                queue.append(new_path)

                IF neighbor == goal:
                    CALCULATE total_time and total_distance:
                        total_time ← SUM dari waktu tiap edge dalam path
                        total_distance ← SUM dari jarak tiap edge dalam path
                    RETURN new_path, total_time, total_distance

            explored.append(node)

    RETURN None, "Tidak ada jalur", 0


// =====================================================
// BAGIAN 5: VISUALISASI RUTE MENGGUNAKAN FOLIUM
// =====================================================
FUNCTION show_map(path, vehicle, time_str, waktu_tempuh, jarak, day):
    IF path is None:
        RETURN

    map_center ← koordinat node tengah di path
    CREATE folium.Map dengan lokasi map_center, zoom 17

    BUAT html_string untuk informasi perjalanan (judul, waktu, lokasi awal, tujuan, dll)

    TAMBAHKAN Popup HTML ke peta

    LOOP i from 0 to len(path) - 2:
        koordinat_start ← get_coordinates(path[i])
        koordinat_end ← get_coordinates(path[i+1])
        TAMBAHKAN folium.PolyLine dari koordinat_start ke koordinat_end ke peta

    TAMBAHKAN marker hijau di titik awal
    TAMBAHKAN marker merah di titik akhir

    SIMPAN peta ke file HTML
    BUKA peta di browser


// ========================================================
// BAGIAN 6: ANTARMUKA GRAFIS (GUI) DENGAN TKINTER
// ========================================================
BUAT jendela Tkinter (judul: UNIB Navigator)

TAMPILKAN label dan dropdown:
    - "Pilih Lokasi Awal"
    - "Pilih Lokasi Tujuan"
    - "Pilih Hari"
    - "Pilih Kendaraan"

ISI combobox dengan daftar lokasi dari graph

TAMPILKAN input waktu (format: 00:00)

TAMPILKAN tombol "Cari Rute"

// ==== Ketika tombol ditekan ====
FUNCTION cari_rute():
    ambil semua input dari GUI
    validasi semua input (tidak kosong)

    panggil bfs_shortest_path dengan start, end, dan hari
    tampilkan hasil rute jika ditemukan
    tampilkan popup jika rute tidak ditemukan

    jika rute ditemukan:
        panggil show_map untuk tampilkan peta rute

TAMPILKAN GUI dengan window.mainloop()

END